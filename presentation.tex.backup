%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[t, 12pt]{beamer}            % Generate slides
%\documentclass[handout]{beamer}   % Generate handouts (6 slides to 1 page)
%\documentclass[aspectratio=169]{beamer}  % Use widescreen 16:9 aspect ratio
    % Possible aspect ratios are 16:9, 16:10, 14:9, 5:4, 4:3 (default) and 3:2
    % (Remember to remove the colon)

%\usetheme{UoB}
\usetheme[nourl]{UoB}        % Remove the footer with the URL

% Generate handouts with notes (3 slides + 3 notes to 1 page)
%\mode<handout>{
%  \pgfpagesuselayout{3 on 1 with notes}[a4paper,border shrink=10mm]
%}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title[Secure Two Party Computation]{Secure Two Party Computation}
\subtitle{A practical comparison of recent protocols}
\author{Nick Tutte}
\institute{University of Bristol}
\date{15th May 2015}


\newcommand{\AdditionTable}
{
	\begin{block}{32-bit Addition Circuit (439 gates)}
		\begin{tabular}{| p{1.6cm} || c c | c c |}
		\hline
		\textbf{Builder} & \textbf{CPU Time} & \textbf{Wall Time} & \textbf{Bytes Sent} & \textbf{Bytes Recv} \\
		\hline
		\hline
		LP-2010 & $113.96$ & $27.41$ & $7,648,074$ & $737,109$ \\
		\hline
		L2013 & $171.21$ & $42.03$ & $4,693,761$ & $980,193$ \\
		\hline
		HKE & $45.59$ & $6.77$ & $3,143,383$ & $3,143,366$ \\
		\hline
		L-HKE & $145.77$ & $25.47$ & $5,995,366$ & $3,299,399$ \\
		\hline
		\end{tabular}

		\vspace{0.2cm}

		\begin{tabular}{| p{1.6cm} || c c | c c |}
		\hline
		\textbf{Executor} & \textbf{CPU Time} & \textbf{Wall Time} & \textbf{Bytes Sent} & \textbf{Bytes Recv} \\
		\hline
		\hline
		LP-2010 & $55.90$ & $27.45$ & $737,109$ & $7,648,074$ \\
		\hline
		L-2013 & $101.69$ & $42.05$ & $980,193$ & $4,693,761$ \\
		\hline
		%HKE & $45.59$ & $6.77$ & $3,143,366$ & $3,143,383$ \\
		%\hline
		L-HKE & $132.51$ & $25.83$ & $3,299,399$ & $5,995,366$ \\
		\hline
		\end{tabular}
	\end{block}
}


\newcommand{\tableAES}
{
	\begin{block}{AES-128 Encryption Circuit (33,872 gates)}
		\begin{tabular}{| p{1.6cm} || c c | c c |}
		\hline
		\textbf{Builder} & \textbf{CPU Time} & \textbf{Wall Time} & \textbf{Bytes Sent} & \textbf{Bytes Recv} \\
		\hline
		\hline
		LP-2010 & $480.82$ & $114.98$ & $668,935,684$ & $2,798,517$ \\
		\hline
		L-2013 & $399.27$ & $119.25$ & $210,537,538$ & $1,609,692$ \\
		\hline
		HKE & $185.47$ & $32.95$ & $238,300,835$ & $238,300,840$ \\
		\hline
		L-HKE & $417.84$ & $78.22$ & $214,725,419$ & $7,868,176$ \\
		\hline
		\end{tabular}

		\vspace{0.2cm}

		\begin{tabular}{| p{1.6cm} || c c | c c |}
		\hline
		\textbf{Executor} & \textbf{CPU Time} & \textbf{Wall Time} & \textbf{Bytes Sent} & \textbf{Bytes Recv} \\
		\hline
		\hline
		LP-2010 & $227.91$ & $116.15$ & $2,798,517$ & $668,935,684$ \\
		\hline
		L-2013 & $270.99$ & $119.27$ & $1,609,692$ & $210,537,538$ \\
		\hline
		%HKE & $185.47$ & $32.95$ & $238,300,840$ & $238,300,835$ \\
		%\hline
		L-HKE & $363.46$ & $80.49$ & $7,868,176$ & $214,725,419$ \\
		\hline
		\end{tabular}
	\end{block}
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\titlepage


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Project Background}
	\begin{itemize} % [<+->]
		\item Secure Multi Party Computation (SMC) is a long standing problem in cryptography.
		\begin{itemize}
			\item How can a set of mutually distrusting parties collaborate to compute a function without revealing their inputs?
		\end{itemize}
		\item We focused on the sub-problem of Secure \emph{Two} Party Computation.
		% MENTION APPLICATIONS HERE!
		\item Yao Garbled Circuits are a popular approach to S2C, but naive Yao Circuits only provide security against passive adversaries.
		\item Recently several protocols have been proposed to provide security against active adversaries.
		\item Our aim was to provide the first practical comparison of some of these protocols performance.
	\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Project Motivation}
	\begin{itemize} % [<+->]
		\item Without a good comparison of these protocols we cannot know which is the most promising for further research.
		\item Whilst limited theoretical comparisons have been made these can only take us so far.
		\item In order to run practical comparisons we need implementations to compare.
		\item Furthermore we broke down our results to identify the bottlenecks for each protocol.
	\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Secure Two Party Computation}
	\begin{itemize} % [<+->]
		\item Two parties wish to compute a function $(y_1, y_2) = f(x_1, x_2)$
		\item They desire the following security properties,
		\begin{itemize}
			\item Privacy - Parties only learn their output from participating.
			\item Correctness - Output is correct evaluation of the function \emph{given the inputs}.
			\item Independence of inputs - Neither party can give their input as a function of the others.
		\end{itemize}
	\end{itemize}
\end{frame}

\begin{frame}{Yao's Protocol}
	\begin{itemize} % [<+->]
		\item Proposed by Andrew Yao in 1986. Primarily used for Two Party computation but it can be extended to Multiparty computation.
		\item  The basic idea,
		\begin{itemize}
			\item One party is labelled the `Builder' and the other is the `Executor'.
			\item The Builder constructs a binary circuit representing the function.
			\item The Builder then `garbles' this circuit, encrypting it in such a way that it can be evaluated without revealing information about the inputs.%, and sends it to the Executor.
			%\item The Builder's inputs are hardcoded, the Executor's inputs are obtained by Oblivious Transfers.
			%\item Using these inputs the Executor can then evaluate the circuit and so the function.
		\end{itemize}
	\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{frame}
% 	\begin{block}{Oblivious Transfer}
% 		\vspace{0.2cm}
% 		\begin{figure}[!htb]
% 			\centering
% 			\begin{minipage}{0.45\textwidth}
% 				\centering
% 			\textbf{Receiver}\\
% 				Inputs : $b \in \{0, 1\}$\\
% 				Outputs : $x_b$\\
% 			\end{minipage}
% 			\begin{minipage}{0.45\textwidth}
% 				\centering
% 				\textbf{Sender}\\
% 				Inputs : $x_0, x_1 \in \{0, 1\}^l$\\
% 				Outputs : $\emptyset$\\
% 			\end{minipage}
% 		\end{figure}
% 	
% 		Formal definition of the functionality of a one-out-of-two OT protocol. The Receiver should learn nothing about the value of $x_{1-b}$ and the Sender should learn nothing about $b$.
% 	\end{block}
% 	
% 	We will not dwell on the details of Oblivious Transfer, suffice to say it is possible, if anyone is interested in seeing a concrete protocol I suggest the Naor-Pinkas Oblivious Transfer.
% \end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The Security of Yao's Protocol}
	\begin{itemize} % [<+->]
		\item As already mentioned Yao's protocol is only secure against passive adversaries. \footnotemark
		\item The Executor has no way to know if the circuit given to it by the Builder actually computes the function it purports to.
		\item There are two main approaches to overcoming this,
		\begin{itemize}
			\item Cut and Choose.
			\item Commit and Prove.
		\end{itemize}
	\end{itemize}
	
	\footnotetext[1]{For a formal proof of this see ``A Proof of Security of Yao's Protocol for Two-Party Computation'' by Lindell and Pinkas (2006).}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Cut and Choose - Concept}
	\begin{itemize} % [<+->]
		\item All three protocols we implemented are based on Cut and Choose.
		\item The Builder now generates many garbled circuits and sends them to the Executor.
		\item The Executor then picks a subset of these circuits and asks the Builder to open them so they can be checked for correctness.
		\item If all check circuits pass then the remaining circuits are evaluated.
		% \item So a malicious Builder must now guess which circuits will be checked.
	\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Cut and Choose - Pitfalls}
	\begin{itemize} % [<+->]
		\item Cut and Choose seems trivially simple, however it actually raises several new problems. The main ones are,
		\begin{itemize}
			\item Consistency of inputs - Ensuring the parties give the same input to the many circuits, without leaking the inputs to the other party.
			\item Output determination - Now we have many circuits what do we do if their outputs disagree?
		\end{itemize}
		\item Protocols aiming to provide active security must address each of these issues.
	\end{itemize}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Lindell-Pinkas 2010 (LP-2010)}
	\begin{itemize} % [<+->]
		\item Based around a new primitive, a Cut and Choose Oblivious Transfer.
		\item Using an elegant approach to consistency using Zero Knowledge proofs.
		\item Half of the circuits are check circuits, the other half are evaluation circuits.
		\item Return majority output of the evaluation circuits.
		\item Statistical security $2^{-0.311 \cdot S}$  where $S$ is the number of circuits.
		\item So we need $130$ circuits to achieve statistical security of $2^{-40}$.
		%\begin{itemize}
		%	\item  
		%\end{itemize}
	\end{itemize}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Lindell 2013 (L-2013)}
	\begin{itemize} % [<+->]
		\item Builds on Lindell-Pinkas 2010 using the same basic ideas.
		\item Modifies the Cut and Choose Oblivious Transfer. % Now 50% chance of being a check circuit.
		\item Runs a small sub-computation (using Lindell-Pinkas) such that only one circuit needs to be correct.
		\item We expected it to perform well for large circuits and poorly for small circuits.
		\item Statistical security $2^{-S}$ , so we need $40$ circuits to achieve statistical security of $2^{-40}$.
	\end{itemize}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Huang-Katz-Evans 2013 (HKE)}
	\begin{itemize} % [<+->]
		\item Developed concurrently to Lindell 2013.
		\item Uses Symmetric cut and choose. Both parties build circuits, both parties execute the other's circuits.
		\item Uses a logarithm based approach to the consistency of inputs.
		\item Output determination is such that,
		\begin{itemize}
			\item For each output wire a value is output if at least one of your circuits gives that value \emph{and} at least one of you partner's circuits gives the same value.
		\end{itemize}
		\item Statistical security $2^{-S + log(S)}$, so \emph{each} party needs $46$ circuits to achieve statistical security of $2^{-40}$.
	\end{itemize}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Merging L-2013 and HKE (L-HKE)}
	\begin{itemize} % [<+->]
		\item The natural question raised by L-2013 is can we improve it by changing the protocol used for the sub-computation?
		\item We changed the sub-computation to use HKE instead.
		\item Not a trivial task,
		\begin{itemize}
			\item Lindell provides several levels of optimisations to the sub-computation some of which are incompatible with HKE.
			\item The Lindell-Pinkas Zero Knowledge Proof approach to cannot work here, we have to switch the whole protocol to use the HKE logarithm based approach.
			\item Additionally the output of the sub-computation needs to be hidden from the Builder. % Talk about the XOR.
		\end{itemize}
	\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
	\AdditionTable
	HKE runs fastest by a very clear margin, while L-2013 uses the least bandwidth.
\end{frame}

% HKE wins! But not only does it win in terms of Wall Clock time, it also wins in CPU time by a clear margin.
% L-2013 uses the least bandwidth, mainly because less circuits to send.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
	\AdditionTable
	L-2013 runs substantially slower than LP-2010 due to the relative cost of the sub-computation being high.
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
	\AdditionTable
	L-HKE's results are very hopeful compared to LP-2010 and L-2013.
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
	\tableAES

	HKE still has a commanding lead. L-2013 closes in on LP-2010.
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Some observations}
	\begin{itemize} % [<+->]
		\item A clear victory for HKE in Wall and CPU time. Surprising given it requires many more circuits than the L-2013 and L-HKE protocols.
		\item L-2013 needs much less bandwidth.
	\end{itemize}

\end{frame}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Achievements}
	\begin{itemize} % [<+->]
		\item We provide the first implementations of LP-2010 and L-2013.
		\item We propose and implement a variant of L-2013 using HKE for the sub-computation.
		\item We provide the first practical comparison of LP-2010, L-2013, HKE and our variant.
		\item Based on our results we suggest the abandonment of the Zero Knowledge Proof approach to consistency proving.
		
	\end{itemize}
\end{frame}


\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
















